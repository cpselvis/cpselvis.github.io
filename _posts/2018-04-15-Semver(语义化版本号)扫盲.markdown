最近工作中发现不少同事对版本号中的beta和rc没有概念，使用**npm install package@next**时，也不清楚next代表的含义。于是，决定写一篇文章科普一下Semver(语义化版本)的相关知识。

### Semver来源
随着 Github 的出现，越来越多的人可以参与到贡献开源代码的活动中，版本号规则越来越混乱。Github 起草了一个具有指导意义的，统一的版本号表示规则，称为 Semantic Versioning(语义化版本表示). 该规则规定了版本号如何表示，如何增加，如何进行比较，不同的版本号意味着什么。

官网：https://semver.org/ 中文版：https://semver.org/lang/zh-CN/

### 版本格式
版本格式：主版本号.次版本号.修订号，版本号递增规则如下：

- 主版本号：当你做了不兼容的 API 修改，
- 次版本号：当你做了向下兼容的功能性新增，
- 修订号：当你做了向下兼容的问题修正。

先行版本号及版本编译信息可以加到“主版本号.次版本号.修订号”的后面，作为延伸。

### 版本修饰
当功能实现差不多的时候，要发布版本了，但是又不能保证这个版本的功能 100% 正常，这个时候可以发布灰度版本。通常用alpha、beta、rc(以前叫做gama)来修饰即将要发布的版本。它们的含义是：

- alpha: 内部版本
- beta: 公测版本
- rc: 即Release candiate，正式版本的候选版本
