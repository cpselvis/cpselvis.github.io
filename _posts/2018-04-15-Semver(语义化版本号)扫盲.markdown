最近Github 10周年在朋友圈里沸沸扬扬刷屏，小编在工作中却惊讶的确发现不少同事对版本号中的beta和rc没有概念，使用**npm install package@next**时，也不清楚next代表的含义。于是，决定写一篇文章科普一下由 Github 起草的Semver(语义化版本)的相关知识。

### 实际案例
首先，我们来看看目前最流行的前端框架之一的React最近5个月的版本发布日志，截图来自npmjs.com：

![](https://user-gold-cdn.xitu.io/2018/4/15/162c9a9c26576fb5?w=1302&h=660&f=jpeg&s=112844)

 从上图，我们不难得出几个结论：
 - 软件的版本通常由三位组成，形如：X.Y.Z
 - 版本是严格递增的，此处是：16.2.0 -> 16.3.0 -> 16.3.1
 - 在发布重要版本时，可以使用alpha, rc等对版本进行修饰
 - alpha和rc等修饰版本的关键字后面可以带上次数和meta信息

可以说，React 发布版本时做的相当到位，版本给人的感觉非常清晰，也很严谨。这得益于 Semver(语义化版本) 规范的功劳。那么，Semver是在什么场景下出现的呢？它的出现又解决了什么问题？这里要和大家科普下“依赖地狱”的概念。

### 依赖地狱
通俗而言，“依赖地狱”指开发者安装某个软件包时，发现这个软件包里又依赖不同特定版本的其它软件包。随着系统功能越来越复杂，依赖的软件包越来越多，依赖关系也越来越深，这个时候可能面临版本控制被锁死的风险。

因此，Github 起草了一个具有指导意义的，统一的版本号表示规则，称为 Semantic Versioning(语义化版本表示)。该规则规定了版本号如何表示，如何增加，如何进行比较，不同的版本号意味着什么。

官网：https://semver.org/ 中文版：https://semver.org/lang/zh-CN/

### 版本格式
版本格式：主版本号.次版本号.修订号，版本号递增规则如下：

- 主版本号：当你做了不兼容的 API 修改，
- 次版本号：当你做了向下兼容的功能性新增，
- 修订号：当你做了向下兼容的问题修正。

先行版本号及版本编译信息可以加到“主版本号.次版本号.修订号”的后面，作为延伸。

### 版本修饰
当功能实现差不多的时候，要发布版本了，但是又不能保证这个版本的功能 100% 正常，这个时候可以发布灰度版本。通常用alpha、beta、rc(以前叫做gama)来修饰即将要发布的版本。它们的含义是：

- alpha: 内部版本
- beta: 公测版本
- rc: 即Release candiate，正式版本的候选版本
